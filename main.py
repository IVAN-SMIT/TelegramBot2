import telebot
import os
import logging
from telebot import types
from deepface import DeepFace


PORT = int(os.environ.get('PORT', 5000))

TOKEN = '5398572755:AAG2j8S0M_OY71TrlWv1dZx0hBgx2lFruZ4'
bot = telebot.TeleBot(TOKEN)
IDEAS_ID = "-1001756194402" #—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —ç—Ç–∏–º –∂–µ –±–æ—Ç–æ–º

#flags:
Flag = False
checker = False
secondWaiter = False
ready = False

#text:
jobtext = '/C–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'
ideaText = '/–ò–¥–µ—è'
NaviText = '/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä'
EnterText = '/–ì–æ—Ç–æ–≤–æ'
TestText = '/–¢–µ—Å—Ç'

#links:
urlCh ="https://www.youtube.com/channel/UCCO8KsSH45_YMF0coYFY89Q"
urlVK ="https://vk.com/developmentaksakalov"
urlTT ="https://www.tiktok.com/@ivan__smit?lang=ru-RU"
urlTG = "https://t.me/ivansmittt"

@bot.message_handler(commands=['start','info'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç,  {message.from_user.first_name}' + "\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π, " \
                                                        "—Ç–∞–∫ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Ö–æ—á–µ—Ç " \
                                                        "—Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É –æ–¥–Ω–æ–π –∏–∑ —Ç–µ–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ. " \
                                                        "–ï—Å–ª–∏ —Ç—ã –æ–¥–∏–Ω –∏–∑ —Ç–∞–∫–∏—Ö, —Ç–æ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å)"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    job = types.KeyboardButton(jobtext)
    idea = types.KeyboardButton(ideaText)
    navi = types.KeyboardButton(NaviText)
    markup.add(idea, job, navi)
    bot.send_message(message.chat.id, mess, reply_markup=markup)


@bot.message_handler(commands=['–Ω–∞–∑–∞–¥','help','info'])
def start(message):
    mess = f'{message.from_user.first_name}, –≤–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:' + "\n\n/–ò–¥–µ—è - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é(–∏–ª–∏ —á—É–∂—É—é) –∏–¥–µ—é/–Ω–∞—Ä–∞–±–æ—Ç–∫–∏/—Å—Ç–∞—Ç—å—é(—Ö–æ—Ç—å —Å —Ö–∞–±—Ä–∞)\n\n" \
                                                        "/–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ - –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–∫–∏/—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑/—Ä–µ–∫–ª–∞–º—ã/—á–µ–≥–æ-—Ç–æ –µ—â—ë\n\n" \
                                                        "/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä - –≤—Å–µ –º–µ–¥–∏–∞—Ä–µ—Å—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã–µ +- –∞–∫—Ç–∏–≤–Ω–æ –≤–µ–¥—É—Ç—Å—è"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    job = types.KeyboardButton(jobtext)
    idea = types.KeyboardButton(ideaText)
    navi = types.KeyboardButton(NaviText)
    markup.add(idea, job, navi)
    bot.send_message(message.chat.id, mess, reply_markup=markup)


@bot.message_handler(commands=['pass'])
def getuser(message):
    bot.send_message(message.chat.id, message.from_user.id*37, parse_mode='html')


@bot.message_handler(commands=['chat'])
def getuser(message):
    bot.send_message(message.chat.id, message.chat.id, parse_mode='html')

@bot.message_handler(commands=['–ì–æ—Ç–æ–≤–æ'])
def all_messages(message):
    mess = message.text
    bot.send_message(message.chat.id, "–ó–∞—á–µ–º —Ç—ã –Ω–∞–ø–∏—Å–∞–ª " +mess +"?", parse_mode='html')
    bot.forward_message(IDEAS_ID, message.chat.id, message.message_id)

@bot.message_handler(commands=['C–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '–ù–∞–≤–∏–≥–∞—Ç–æ—Ä', '–ò–¥–µ—è'])
def navigateButtons(message):
    if message.text == jobtext:
        bot.delete_my_commands()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", url="https://vk.com/im?sel=-132621744"))
        bot.send_message(message.chat.id, "–ù–∞—à–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ –≤ VK: \n "
                                          "https://vk.com/auxiliumexo", reply_markup=markup)
    elif message.text == ideaText:
        bot.delete_my_commands()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        website = types.KeyboardButton("/–í–∏–¥–µ–æ")
        text = types.KeyboardButton("/–¢–µ–∫—Å—Ç")
        photo = types.KeyboardButton("/–§–æ—Ç–æ")
        back = types.KeyboardButton("/–Ω–∞–∑–∞–¥")
        markup.add(back, website, text, photo)
        bot.send_message(message.chat.id, "–í–æ—É, –∞ —Ç—ã —è —Å–º–æ—Ç—Ä—é –≤—ã–¥—É–º—â–∏–∫ –∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏–¥–µ–µ–π! –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –µ—ë –Ω–∞–º:", reply_markup=markup)

    elif message.text == NaviText:
        bot.delete_my_commands()
        markup =types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("YouTube", url=urlCh))
        markup.add(types.InlineKeyboardButton("VK", url=urlVK))
        markup.add(types.InlineKeyboardButton("TT", url=urlTT))
        markup.add(types.InlineKeyboardButton("Telegram (–Ω—É –º–∞–ª–æ –ª–∏)", url=urlTG))
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏, –Ω–µ —Ç–µ—Ä—è–π", reply_markup=markup)


@bot.message_handler(commands=["–¢–µ—Å—Ç"])
def faseID(message):
    global checker
    checker = True
    mess = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞! –î–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü - –±—É–¥–µ—Ç –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –Ω–æ–≤–æ–º —à–ª–µ–º–µ —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–µ–π—á–∞—Å —Å–æ–∑–¥–∞–µ–º. ' \
           f'–õ–∏—Ü–∞ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –≤—Å–µ –ø–æ –≤–∑—Ä–æ—Å–ª–æ–º—Éüòé\n\n' \
           f'–û—Ç–ø—Ä–∞–≤—å  <b><u>–û–î–ù–û –§–û–¢–û</u></b>  –ª–∏—Ü–∞ —á–µ–ª–æ–≤–µ–∫–∞  <b><u>–ë–ï–ó –ü–û–î–ü–ò–°–ï–ô</u></b>  –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n' \
           f'–ï—â–µ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –±—ã–ª–æ —á–µ—Ç–∫–æ–µ, –∫–∞–∫ –Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ç–æ—á–Ω–æ —É–∑–Ω–∞–ª–∞ –≤ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("/–Ω–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)



@bot.message_handler(commands=["–¢–µ–∫—Å—Ç","–í–∏–¥–µ–æ","–§–æ—Ç–æ"])
def navigateButtons(message):
    global  Flag
    if message.text == "/–¢–µ–∫—Å—Ç":
        mess= f'–†–µ—à–∏–ª –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∏–¥–µ—é —Ç–µ–∫—Å—Ç–æ–º? –ß—Ç–æ–∂, –ª–∞–¥–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –æ–ø–∏—à–∏ –µ–µ \n\n<b><u>–û–î–ù–ò–ú –°–û–û–ë–©–ï–ù–ò–ï–ú!</u></b>\n\n(–º–æ–∂–Ω–æ –∏ —Å—Å—ã–ª–∫–æ–π)'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton("/–Ω–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
        Flag = True
        sendText(message)

    elif message.text == "/–í–∏–¥–µ–æ":
        mess = "–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.–í–∞–∂–Ω–æ,—á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ \n\n<b>–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ <u>–¢–û–õ–¨–ö–û –û–î–ù–û!</u></b>"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton("/–Ω–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
        Flag = True

    elif message.text == "/–§–æ—Ç–æ":
        mess =f'–î–∞–≤–∞–π, –∂–¥—É —Ñ–æ—Ç–æ—á–µ–∫ –æ—Ç —Ç–µ–±—è.–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ \n\n<b>–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ <u>–¢–û–õ–¨–ö–û –û–î–ù–£</u></b>'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton("/–Ω–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
        Flag = True
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


@bot.message_handler(content_types=['text'])
def sendText(message):
    global Flag
    mess = f'–°–ø–∞—Å–∏–±–æ, {message.from_user.first_name}!'+"\n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —Å–≤—è–∂–µ–º—Å—è, –µ—Å–ª–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!"
    if message.text !='/–¢–µ–∫—Å—Ç':
        if message.text !='/–í–∏–¥–µ–æ':
            if message.text !='/–§–æ—Ç–æ':
                if  Flag == True:
                    bot.send_message(message.chat.id, mess, parse_mode='html')
                    bot.send_message(IDEAS_ID, f'<b>–¢–µ–∫—Å—Ç –æ—Ç <u>{message.from_user.first_name}</u></b> @{message.from_user.username} \n\n' + message.text,parse_mode='html')
                    Flag = False


@bot.message_handler(content_types=['photo'])
def checkFaces(message):
    global checker
    global secondWaiter
    global ready
    global Flag

    if secondWaiter == True:
        number = 'Two'
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        filename, file_extension = os.path.splitext(file_info.file_path)
        downloaded_photo = bot.download_file(file_info.file_path)
        scr = 'photos/' + 'faceID' + number + file_extension
        with open(scr, 'wb') as new_file:
            new_file.write(downloaded_photo)

        bot.reply_to(message, '–í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n–ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–æ–≥–¥–∞ –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç)')
        bot.send_message(IDEAS_ID,f'<b>FaceId 2 –æ—Ç <u>{message.from_user.first_name}</u></b> @{message.from_user.username} \n\n',parse_mode='html')
        bot.send_photo(IDEAS_ID, message.photo[0].file_id)
        secondWaiter = False
        ready = True

    if checker == True:
        number = 'One'
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        filename, file_extension = os.path.splitext(file_info.file_path)
        downloaded_photo = bot.download_file(file_info.file_path)
        scr = 'photos/' + 'faceID' + number + file_extension
        with open(scr, 'wb') as new_file:
            new_file.write(downloaded_photo)

        bot.reply_to(message,'–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–æ')
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ', parse_mode='html')
        bot.send_message(IDEAS_ID,f'<b>FaceId 2 –æ—Ç <u>{message.from_user.first_name}</u></b> @{message.from_user.username} \n\n',parse_mode='html')
        bot.send_photo(IDEAS_ID, message.photo[0].file_id)
        checker = False
        secondWaiter = True


    if ready == True:
        answ = face_check('photos/faceIDOne.jpg', 'photos/faceIDTwo.jpg')
        Flag = False
        if answ == "–ª–∏—Ü–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —á–µ–ª–æ–≤–µ–∫–∞":
            bot.send_message(message.chat.id, '–≠—Ç–æ –ª–∏—Ü–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —á–µ–ª–æ–≤–µ–∫–∞. –ë—É–¥—å –æ–Ω –≤ —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç–µ, –µ–º—É –±—ã–ª –±—ã —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø)', parse_mode='html')
            ready = False
        elif answ == "—Ö—É–π –ø–æ–π–º–∏ –∫—Ç–æ —ç—Ç–æ":
            bot.send_message(message.chat.id, '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∏—á–µ–≥–æ –æ–±—â–µ–≥–æ, —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏', parse_mode='html')
            ready = False
        elif answ == "err":
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ—Å—å –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤/–æ—Å–≤–µ—â–µ–Ω–∏—è/—Ä–∞–∫—É—Ä—Å–∞\n'
                                              '–∂–º–∏ "/–Ω–∞–∑–∞–¥"', parse_mode='html')
            ready = False
        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –≤–æ–æ–±—â–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å—Ä–æ—á–Ω–æ –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É', parse_mode='html')
            ready = False


    mess = f'–°–ø–∞—Å–∏–±–æ, {message.from_user.first_name}!' + "\n\n–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –¥–ª—è –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
    if (Flag == True)&(ready == False)&(checker == False)&(secondWaiter == False):
        bot.send_message(message.chat.id, mess, parse_mode='html')
        bot.send_message(IDEAS_ID,
                         f'<b>–§–æ—Ç–æ –æ—Ç <u>{message.from_user.first_name}</u></b> @{message.from_user.username} \n\n',
                         parse_mode='html')
        bot.send_photo(IDEAS_ID, message.photo[0].file_id)


def face_check(img1, img2):
    try:
        resultDick = DeepFace.verify(img1_path=img1, img2_path=img2)
        if resultDick.get('verified'):
            return ("–ª–∏—Ü–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —á–µ–ª–æ–≤–µ–∫–∞")
        else:
            return ("—Ö—É–π –ø–æ–π–º–∏ –∫—Ç–æ —ç—Ç–æ")
    except Exception as _ex:
        return "err"



@bot.message_handler(content_types=['video'])
def sendPhoto(message):
    global Flag
    mess = f'–°–ø–∞—Å–∏–±–æ, {message.from_user.first_name}!' + "\n\n–í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å –º—ã –Ω–∞–π–¥–µ–º –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
    if Flag == True:
        bot.send_message(message.chat.id, mess, parse_mode='html')
        bot.send_message(IDEAS_ID,f'<b>–í–∏–¥–µ–æ –æ—Ç <u>{message.from_user.first_name}</u></b> @{message.from_user.username} \n\n',parse_mode='html')
        bot.send_video(IDEAS_ID, message.video.file_id)

bot.polling(none_stop=True)